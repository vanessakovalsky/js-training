// === GESTION DES ERREURS ===

// === 1. ERREURS PERSONNALIS√âES ===

// Classe de base pour nos erreurs m√©tier
class BusinessError extends Error {
    constructor(message, code) {
      super(message);
      this.name = this.constructor.name;
      this.code = code;
      this.timestamp = new Date();
    }
  }
  
  // Erreur de stock insuffisant
  class StockInsuffisantError extends BusinessError {
    constructor(produit, demande, disponible) {
      super(
        `Stock insuffisant pour "${produit}" (demand√©: ${demande}, disponible: ${disponible})`,
        'STOCK_INSUFFISANT'
      );
      this.produit = produit;
      this.demande = demande;
      this.disponible = disponible;
    }
  }
  
  // Erreur de produit non trouv√©
  class ProduitNonTrouveError extends BusinessError {
    constructor(produitId) {
      super(`Produit non trouv√© (ID: ${produitId})`, 'PRODUIT_NON_TROUVE');
      this.produitId = produitId;
    }
  }
  
  // Erreur de validation
  class ValidationError extends BusinessError {
    constructor(champ, message) {
      super(`Validation √©chou√©e pour "${champ}": ${message}`, 'VALIDATION_ERROR');
      this.champ = champ;
    }
  }
  
  // === 2. FONCTIONS AVEC GESTION D'ERREURS ===
  
  // Base de donn√©es simul√©e
  const produits = [
    { id: 1, nom: "Souris sans fil", stock: 50, prix: 29.99 },
    { id: 2, nom: "Clavier m√©canique", stock: 5, prix: 89.99 },
    { id: 3, nom: "√âcran 24 pouces", stock: 0, prix: 199.99 }
  ];
  
  // Fonction de validation
  function validerQuantite(quantite) {
    if (typeof quantite !== 'number') {
      throw new ValidationError('quantite', 'Doit √™tre un nombre');
    }
    
    if (!Number.isInteger(quantite)) {
      throw new ValidationError('quantite', 'Doit √™tre un entier');
    }
    
    if (quantite <= 0) {
      throw new ValidationError('quantite', 'Doit √™tre positif');
    }
    
    return true;
  }
  
  // Fonction de validation du prix
  function validerPrix(prix) {
    if (typeof prix !== 'number') {
      throw new ValidationError('prix', 'Doit √™tre un nombre');
    }
    
    if (prix < 0) {
      throw new ValidationError('prix', 'Ne peut pas √™tre n√©gatif');
    }
    
    return true;
  }
  
  // Trouver un produit avec gestion d'erreur
  function trouverProduit(id) {
    const produit = produits.find(p => p.id === id);
    
    if (!produit) {
      throw new ProduitNonTrouveError(id);
    }
    
    return produit;
  }
  
  // Vendre un produit avec gestion compl√®te des erreurs
  function vendreArticle(produitId, quantite) {
    console.log(`\nüõí Tentative de vente: ${quantite} √ó produit ${produitId}`);
    
    try {
      // 1. Validation des param√®tres
      validerQuantite(quantite);
      
      // 2. Recherche du produit
      const produit = trouverProduit(produitId);
      console.log(`  üì¶ Produit trouv√©: ${produit.nom}`);
      
      // 3. V√©rification du stock
      if (produit.stock < quantite) {
        throw new StockInsuffisantError(produit.nom, quantite, produit.stock);
      }
      
      // 4. Mise √† jour du stock
      produit.stock -= quantite;
      const montant = produit.prix * quantite;
      
      console.log(`  ‚úÖ Vente r√©ussie !`);
      console.log(`  üí∞ Montant: ${montant.toFixed(2)}‚Ç¨`);
      console.log(`  üìä Stock restant: ${produit.stock}`);
      
      return {
        succes: true,
        produit: produit.nom,
        quantite,
        montant,
        stockRestant: produit.stock
      };
      
    } catch (erreur) {
      // Gestion sp√©cifique selon le type d'erreur
      if (erreur instanceof ValidationError) {
        console.error(`  ‚ùå Erreur de validation: ${erreur.message}`);
      } else if (erreur instanceof ProduitNonTrouveError) {
        console.error(`  ‚ùå Produit inexistant: ${erreur.message}`);
      } else if (erreur instanceof StockInsuffisantError) {
        console.error(`  ‚ùå Stock insuffisant: ${erreur.message}`);
        console.error(`     Disponible: ${erreur.disponible} unit√©s`);
      } else {
        console.error(`  ‚ùå Erreur inattendue: ${erreur.message}`);
      }
      
      return {
        succes: false,
        erreur: erreur.message,
        code: erreur.code || 'UNKNOWN_ERROR'
      };
    } finally {
      console.log(`  üèÅ Transaction termin√©e`);
    }
  }
  
  // === 3. GESTION D'ERREURS ASYNC ===
  
  // Simuler une op√©ration asynchrone
  const attendre = (ms) => new Promise(resolve => setTimeout(resolve, ms));
  
  async function verifierStockAsync(produitId) {
    console.log(`\n‚è≥ V√©rification asynchrone du stock pour produit ${produitId}...`);
    
    try {
      // Simuler un d√©lai r√©seau
      await attendre(1000);
      
      // Recherche du produit (peut lever une erreur)
      const produit = trouverProduit(produitId);
      
      console.log(`  ‚úÖ Stock v√©rifi√©: ${produit.stock} unit√©s de ${produit.nom}`);
      
      return {
        succes: true,
        produit: produit.nom,
        stock: produit.stock
      };
      
    } catch (erreur) {
      console.error(`  ‚ùå Erreur lors de la v√©rification: ${erreur.message}`);
      
      // Re-lancer l'erreur pour la propager
      throw erreur;
    } finally {
      console.log(`  üèÅ V√©rification termin√©e`);
    }
  }
  
  // Fonction wrapper pour g√©rer les erreurs async
  async function executerAvecGestionErreur(operation, ...args) {
    try {
      return await operation(...args);
    } catch (erreur) {
      console.error("\nüö® ERREUR CAPTUR√âE PAR LE WRAPPER:");
      console.error(`   Type: ${erreur.name}`);
      console.error(`   Message: ${erreur.message}`);
      console.error(`   Code: ${erreur.code || 'N/A'}`);
      
      // Logger pour le monitoring
      loggerErreur(erreur);
      
      return null;
    }
  }
  
  // Fonction de logging des erreurs
  function loggerErreur(erreur) {
    const log = {
      timestamp: new Date().toISOString(),
      type: erreur.name,
      message: erreur.message,
      code: erreur.code,
      stack: erreur.stack
    };
    
    // En production, envoyer √† un service de monitoring
    console.log("\nüìù LOG D'ERREUR:", JSON.stringify(log, null, 2));
  }
  
  // === 4. TESTS COMPLETS ===
  
  console.log("=== TESTS DE GESTION DES ERREURS ===");
  
  // Test 1: Vente r√©ussie
  vendreArticle(1, 10);
  
  // Test 2: Validation √©chou√©e (quantit√© n√©gative)
  vendreArticle(1, -5);
  
  // Test 3: Produit non trouv√©
  vendreArticle(999, 1);
  
  // Test 4: Stock insuffisant
  vendreArticle(2, 10);
  
  // Test 5: Validation √©chou√©e (type incorrect)
  vendreArticle(1, "cinq");
  
  // === TESTS ASYNCHRONES ===
  
  async function executerTestsAsync() {
    console.log("\n=== TESTS ASYNCHRONES ===");
    
    // Test 1: V√©rification r√©ussie
    await executerAvecGestionErreur(verifierStockAsync, 1);
    
    // Test 2: Produit non trouv√© (erreur propag√©e)
    await executerAvecGestionErreur(verifierStockAsync, 999);
    
    // Test 3: V√©rifications multiples avec Promise.allSettled
    console.log("\n=== V√âRIFICATIONS MULTIPLES ===");
    const resultats = await Promise.allSettled([
      verifierStockAsync(1),
      verifierStockAsync(2),
      verifierStockAsync(999), // Va √©chouer
      verifierStockAsync(3)
    ]);
    
    console.log("\nüìä R√âSUM√â DES V√âRIFICATIONS:");
    resultats.forEach((resultat, index) => {
      if (resultat.status === 'fulfilled') {
        console.log(`  ‚úÖ V√©rification ${index + 1}: OK`);
      } else {
        console.log(`  ‚ùå V√©rification ${index + 1}: ${resultat.reason.message}`);
      }
    });
  }
  
  // Ex√©cuter les tests async
  executerTestsAsync().catch(console.error);
  
  // === 5. BONNES PRATIQUES ===
  
  console.log("\n=== BONNES PRATIQUES ===");
  console.log(`
  ‚úÖ DO:
    - Cr√©er des classes d'erreur personnalis√©es
    - Utiliser try/catch pour les op√©rations risqu√©es
    - Propager les erreurs avec throw
    - Logger les erreurs pour le monitoring
    - Retourner des objets de r√©sultat structur√©s
    
  ‚ùå DON'T:
    - Ne pas ignorer silencieusement les erreurs
    - Ne pas utiliser catch() vide
    - Ne pas masquer les vraies erreurs
    - Ne pas utiliser les erreurs pour le contr√¥le de flux normal
  `);